buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.guardsquare:proguard-gradle:7.3.0"
    }
}

plugins {
    id "java"
    id "application"
}

def osName = System.getProperty("os.name")
def isArm = System.getProperty("os.arch").equals("aarch64")
def platform = osName.contains("OS X") ? 'mac' + (isArm ? "Arm64" : "X86") : 'unknown'

String exec(def line, String dir = ".", boolean failOnError = true) {
    def proc = Runtime.getRuntime().exec(line, null, project.file(dir))
    if (proc.waitFor() == 0) return new String(proc.inputStream.readAllBytes()).trim()
    else {
        if (failOnError) throw new Exception(line + "\n" + new String(proc.errorStream.readAllBytes()))
        else return null
    }
}

application {
    mainClassName = 'net.azib.ipscan.Main'
}

tasks.named('run') {
    doFirst {
        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            jvmArgs '-XstartOnFirstThread'
        }
    }
}

version = exec("git describe --tags", ".", false) ?: "unknown"

sourceCompatibility = targetCompatibility = 11

def javaModules = ["java.base", "java.prefs", "java.logging", "jdk.crypto.ec"]
project.ext.set("javaModules", javaModules)

sourceSets {
    main {
        java { srcDirs "src" }
        resources { srcDirs "config", "src", "resources" }
    }
    test {
        java { srcDir "test" }
        resources { srcDir "test" }
    }
}

repositories {
    mavenCentral()
}

configurations {
    macX86
    macArm64

    compileOnly.extendsFrom(getAt(platform))
    testImplementation.extendsFrom(compileOnly)
    runtimeClasspath.extendsFrom(compileOnly)
    all*.exclude module: 'org.eclipse.swt'
}

dependencies {
    def swtVersion = '3.123.0'
    macX86 "org.eclipse.platform:org.eclipse.swt.cocoa.macosx.x86_64:${swtVersion}"
    macArm64 "org.eclipse.platform:org.eclipse.swt.cocoa.macosx.aarch64:${swtVersion}"
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:2.23.0'
}

test {
    if (platform.startsWith("mac")) {
        println("WARNING: tests that touch GUI will fail on Mac due to Cocoa restrictions and Gradle unable to run tests on main thread")
        filter {
            includeTestsMatching "net.azib.ipscan.core.net.*"
        }
    }
}

def packageTask(String platform, Closure doMore) {
    return tasks.create(platform, Jar) {
        dependsOn = ['classes']
        manifest {
            attributes 'Implementation-Title': 'Angry IP Scanner',
                    'Implementation-Version': version,
                    'Main-Class': 'net.azib.ipscan.Main',
                    'Class-Path': "./",
                    'Title': 'Angry IP Scanner',
                    'Version': version,
                    'Build-Date': java.time.LocalDate.now().toString(),
                    'URL': 'https://angryip.org/'
        }
        archiveBaseName.set(project.name + '-' + platform)
        from {
            configurations[platform].collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
        exclude(
                'images/**/*.svg',
                'META-INF/ECLIPSE*',
                'about_files/*',
                'version.txt',
                '.api_description',
                'about.html',
                'fragment.properties',
                'chrome.manifest',
                'libswt-awt-*.jnilib',
                'com/sun/jna/*/*.a',
                'com/sun/jna/*/*.so',
                'com/sun/jna/*/*.jnilib'
        )
        with jar

        finalizedBy minimizeTask(platform, doMore)
    }
}

def minimizeTask(String platform, Closure doMore) {
    return tasks.create("${platform}.min", proguard.gradle.ProGuardTask) {
        injars "build/libs/${project.name}-${platform}-${version}.jar"
        outjars "build/libs/${project.name}-${platform}-${version}.min.jar"
        (project.ext.javaModules + "java.desktop").each {
            libraryjars System.getProperty('java.home') + "/jmods/${it}.jmod"
        }
        dontobfuscate
        dontoptimize
        dontnote '**'
        configuration 'ext/swt.pro'
        configuration 'ext/jna.pro'

        def keepClasses = [
                'net.azib.ipscan.**',
        ]

        for (keepClass in keepClasses) {
            keep access: 'public', name: keepClass, {
                method access: 'public'
            }
        }

        doLast {
            ant.move(file: "build/libs/${project.name}-${platform}-${version}.min.jar", tofile: "build/libs/${project.name}-${platform}-${version}.jar")
            doMore()
        }
    }
}

def macLauncher(def platform) {
    def dist = buildDir.path + '/libs'
    def name = 'Angry IP Scanner'
    exec("cp -rp ext/mac-bundle/. $dist")
    ant.copy(todir: dist) {
        ant.fileset(dir: "ext/mac-bundle")
    }

    def target = "${dist}/${name}.app/Contents/MacOS"
    ant.move(file: "${dist}/${project.name}-${platform}-${version}.jar", todir: target)
    jlink(target, "jre")

    ant.replace(file: "${dist}/${name}.app/Contents/Info.plist") {
        ant.replacefilter(token: "APPNAME", value: name)
        ant.replacefilter(token: "VERSION_NUM", value: version.replaceFirst('-.*', ''))
        ant.replacefilter(token: "VERSION", value: version)
    }

    ant.delete(file: "${dist}/${name}.app/Contents/MacOS/jre/bin/keytool")

    def zipName = "${dist}/${project.name}-${platform}-${version}.zip"
    exec("zip -R $zipName * -x*.zip", dist)

    if (System.getenv("APPLE_USER")) {
        println("Sending zip file to Apple for notarization")
        exec("xcrun altool --list-providers --username ${System.getenv("APPLE_USER")} --password ${System.getenv("APPLE_PASSWORD")}", ".", false)
        exec("xcrun altool --notarize-app --primary-bundle-id net.azib.ipscan.zip --username ${System.getenv("APPLE_USER")} --password ${System.getenv("APPLE_PASSWORD")} --file ${zipName}", ".", false)
    }

    ant.delete(dir: "${dist}/${name}.app")
}

packageTask('macX86') {
    macLauncher("macX86")
}

packageTask('macArm64') {
    macLauncher("macArm64")
}

def jlink(String target, String jrePath, String extraOpts = System.getenv("JLINK_OPTS") ?: "") {
    def jreDir = new File(target, jrePath)
    if (!jreDir.exists()) {
        jreDir.getParentFile().mkdirs()
        exec("jlink --output $jrePath $extraOpts --vm=client --compress=2 --no-header-files --no-man-pages --strip-debug --add-modules " + javaModules.join(","), target)
        ant.delete(dir: new File(jreDir, "legal"))
    }
}

task mac(dependsOn: ['macX86', 'macArm64'])

task current(dependsOn: [platform])

task info {
    doLast {
        println "This script will build ${project.name} ${version}"
        println "Targets:"
        println "  current       - build for current platform ($platform)"
        println "  mac           - builds all Mac binaries"
        println "  macX86        - builds only MacX86 binary"
        println "  macArm64      - builds only MacArm64 binary"
    }
}

defaultTasks 'info'